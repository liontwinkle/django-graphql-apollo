#!/bin/bash
# This script pulls together frequent commands for orchestrating
# our docker setup.

cd "$(dirname $0)"

task=$1 # More descriptive name
arg=$2
args=${*:2}

# Copy the env file if it doesn't exist
if [ ! -f .env ]; then
    cp .env.example .env
fi
source .env

case $task in
    build)
        # Build docker containers. Pass --no-cache to force re-downloading of images.
        # See build --help for additional info
        docker-compose build $args
        ;;
    start)
        # Start docker containers.
        # See up --help for additional info
        docker-compose up $args
        ;;
    stop)
        # Stop docker containers.
        docker-compose stop
        ;;
    clean)
        # Remove docker containers (if they exist)
        if docker inspect uplifty-db > /dev/null 2> /dev/null; then
            docker rm -f uplifty-db
        fi
        if docker inspect uplifty-db-test > /dev/null 2> /dev/null; then
            docker rm -f uplifty-db-test
        fi
        if docker inspect uplifty > /dev/null 2> /dev/null; then
            docker rm -f uplifty
        fi
        if docker image inspect uplifty-db > /dev/null 2> /dev/null; then
            docker rmi uplifty-db
        fi
        if docker image inspect uplifty > /dev/null 2> /dev/null; then
            docker rmi uplifty
        fi
        ;;
    bash)
        # SSH (bash) into server container.
        # Useful for running Django shell commands.
        docker exec -it uplifty bash
        ;;
    bashdb)
        # SSH (bash) into database container.
        # Useful for running commands directly against database.
        docker exec -it uplifty-db bash
        ;;
    shell)
        # SSH (bash) into server container.
        # Useful for running Django shell commands.
        docker exec -it uplifty python manage.py shell
        ;;
    lint)
        # Lint server code automatically with black and autoflake
        # WARNING: This updates files in-place.
        docker exec uplifty black /code/server
        docker exec uplifty autoflake . --in-place --recursive --remove-all-unused-imports --remove-duplicate-keys --remove-unused-variables
        ;;
    security-check)
        # Security vulnerability checks
        # Check packages
        docker exec server pipenv check --system
        # Check files, except tests. See also server/.bandit config
        docker exec server bandit -r .
        ;;
    dbshell)
        # SSH (bash) into database container.
        # Useful for running postgres commands.
        docker exec -it uplifty-db psql -U postgres
        ;;
    cleandb)
        # Drop the local database.
        docker exec -it uplifty-db psql -h db -U postgres -c "DROP DATABASE IF EXISTS uplifty"
        ;;
    migrate)
        # Run database migrations.
        docker exec -it uplifty python manage.py migrate $args
        ;;
    test)
        # Run the tests against a test database, from a test container.
        # Useful for running Django shell commands.
        if ! docker inspect uplifty-db-test > /dev/null 2> /dev/null; then
             docker run \
                --detach \
                --name uplifty-db-test \
                --env-file=.env \
                postgres
        fi

        docker start uplifty-db-test > /dev/null

        # in a while loop wait for the db test container to really start
        until docker exec -it uplifty-db-test psql -U postgres -c '\q' > /dev/null 2> /dev/null; do
            sleep 0.5
        done


        if [[ ! $args =~ "--reuse-db"* ]]; then
            echo "Drop and create the database(s)"
            docker exec -it uplifty-db-test psql -U postgres -c "DROP DATABASE IF EXISTS uplifty" > /dev/null 2>&1
            docker exec -it uplifty-db-test psql -U postgres -c "CREATE DATABASE uplifty" > /dev/null 2>&1
        fi

        docker run \
            -it --rm \
            --name uplifty-test \
            --link uplifty-db-test:db \
            -v $(pwd):/code:rw \
            --env-file=.env \
            -e IS_TESTING=true \
            uplifty \
            test $args

        ;;
    'help')
        scriptname=`basename "$0"`
        echo 'Usage: ./'$scriptname' action [params]. Available actions:'
        echo '    build: build or rebuild containers'
        echo '    start: start containers'
        echo '    stop: stop containers'
        echo '    clean: remove containers and test containers, including databases'
        echo '    bash: bash into the server container'
        echo '    shell: start django shell'
        echo '    migrate: run django migrations'
        echo '    lint: lint server (python) code'
        echo '    bashdb: bash into the database container'
        echo '    cleandb: drop database'
        echo '    dbshell: psql into the database'
        echo '    security-check: run a security check for server-side vulnerabilities'
        ;;
    '')
        scriptname=`basename "$0"`
        echo 'Usage: ./'$scriptname' action [params]. For a list of actions, run ./'$scriptname' help'
        ;;
    *)
        scriptname=`basename "$0"`
        echo 'Unknown action '$task'. For a list of the available actions, run ./'$scriptname' help'
        ;;
esac
